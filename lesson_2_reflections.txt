What happens when you initialize a repository? Why do you need to do it?

Initializing an empty repository needs to be done in order to identify a 
directory as a git repo and enabling git functionality. Initializing creates 
the metadata folder for git and enables git commands and version control to be
used with the directory.


How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area is different as files in the staging area are not yet
committed to the repository, but they are being prepared to be committed unlike
the working directory. This is valuable as it allows you to only commit what
you want to commit at any given time, rather than the whole package.


How can you use the staging area to make sure you have one commit per logical 
change?

This is helpful because even if you make multiple changes during one session,
the ability to control which files are committed at a given time via the
staging area allows you to control commits more carefully, hence allowing you
to spread larger changes across multiple commits.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches may be helpful in many cases where the developer would like features,
experiments, or different versions of a program. Branches can help because they
can be freely changed and edited with no impact at all on the master program
itself.


How do the diagrams help you visualize the branch structure?

Not only do diagrams show the history of each branch, but they also show when
each branch was created, and from what commit each was split. Additionally, a
diagram can also help us determine which commits are reachable from any given
point in the repository's history.


What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

When we merge branches together, their changes are merged together into one
file so that the functionality of both branches is preserved. Also, their
history becomes one shared log. We represent this in the diagram the way we do
because they become one branch; when merging with master, this essentially
means that the old branch is no more. When merging two non-master branches,
this means that the two have become one.
